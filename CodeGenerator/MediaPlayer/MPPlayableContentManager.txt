MPPlayableContentManager : NSObject, MPPlayableContentDelegate, MPPlayableContentDataSource

DELEGATE_LIST:delegate, dataSource


// MPPlayableContentDataSource
    /// Tells the data source to begin loading content items that are children of the
    /// item specified by indexPath. This is provided so that applications can begin
    /// asynchronous batched loading of content before MediaPlayer begins asking for
    /// content items to display.
    /// Client applications should always call the completion handler after loading
    /// has finished, if this method is implemented.
    optional public func beginLoadingChildItems(at indexPath: IndexPath, completionHandler: @escaping (Error?) -> Void)

    
    /// Tells MediaPlayer whether the content provided by the data source supports
    /// playback progress as a property of its metadata.
    /// If this method is not implemented, MediaPlayer will assume that progress is
    /// not supported for any content items.
    optional public func childItemsDisplayPlaybackProgress(at indexPath: IndexPath) -> Bool

    
    /// Provides a content item for the provided identifier.
    /// Provide nil if there is no content item corresponding to the identifier.
    /// Provide an error if there is an error that will not allow content items
    /// to be retrieved.
    /// Client applications should always call the completion handler after loading
    /// has finished, if this method is implemented.
    @available(iOS 10.0, *)
    // optional public func contentItem(forIdentifier identifier: String, completionHandler: @escaping (MPContentItem?, Error?) -> Void)

    
    /// Returns the number of child nodes at the specified index path. In a virtual
    /// filesystem, this would be the number of files in a specific folder. An empty
    /// index path represents the root node.
    public func numberOfChildItems(at indexPath: IndexPath) -> Int

    
    /// Returns the content item at the specified index path. If the content item is
    /// mutated after returning, its updated contents will be sent to MediaPlayer.
    @available(iOS 7.1, *)
    public func contentItem(at indexPath: IndexPath) -> MPContentItem?

// MPPlayableContentDelegate
    /// This method is called when a media player interface wants to play a requested
    /// content item. The application should call the completion handler with an
    /// appropriate error if there was an error beginning playback for the item.
    @available(iOS 7.1, *)
    optional public func playableContentManager(_ contentManager: MPPlayableContentManager, initiatePlaybackOfContentItemAt indexPath: IndexPath, completionHandler: @escaping (Error?) -> Void)

    
    /// This method is called when a media player interface wants the now playing
    /// app to setup a playback queue for later playback. The application should
    /// load content into its play queue but not start playback until a Play command is
    /// received or if the playable content manager requests to play something else.
    /// The app should call the provided completion handler once it is ready to play
    /// something.
    @available(iOS 9.0, *)
    @available(iOS, introduced: 9.0, deprecated: 9.3, message: "Use initializePlaybackQueueWithContentItems:completionHandler: instead")
    // optional public func playableContentManager(_ contentManager: MPPlayableContentManager, initializePlaybackQueueWithCompletionHandler completionHandler: @escaping (Error?) -> Void)

    
    /// This method is called when a media player interface wants the now playing
    /// app to setup a playback queue for later playback. The application should
    /// load content into its play queue based on the provided content items and
    /// prepare it for playback, but not start playback until a Play command is
    /// received or if the playable content manager requests to play something else.
    /// A nil contentItems array means that the app should prepare its queue with
    /// anything it deems appropriate.
    /// The app should call the provided completion handler once it is ready to play
    /// something.
    @available(iOS 9.3, *)
    // optional public func playableContentManager(_ contentManager: MPPlayableContentManager, initializePlaybackQueueWithContentItems contentItems: [Any]?, completionHandler: @escaping (Error?) -> Void)

    
    /// This method is called when the content server notifies the manager that the current context has changed.
    @available(iOS 8.4, *)
    // optional public func playableContentManager(_ contentManager: MPPlayableContentManager, didUpdate context: MPPlayableContentManagerContext)