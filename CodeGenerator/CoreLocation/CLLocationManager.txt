CLLocationManager: NSObject, CLLocationManagerDelegate

    /*
     *  locationManager:didUpdateToLocation:fromLocation:
     *  
     *  Discussion:
     *    Invoked when a new location is available. oldLocation may be nil if there is no previous location
     *    available.
     *
     *    This method is deprecated. If locationManager:didUpdateLocations: is
     *    implemented, this method will not be called.
     */
    
    /*
     *  locationManager:didUpdateLocations:
     *
     *  Discussion:
     *    Invoked when new locations are available.  Required for delivery of
     *    deferred locations.  If implemented, updates will
     *    not be delivered to locationManager:didUpdateToLocation:fromLocation:
     *
     *    locations is an array of CLLocation objects in chronological order.
     */
    @availability(iOS, introduced=6.0)
    optional func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!)
    
    /*
     *  locationManager:didUpdateHeading:
     *  
     *  Discussion:
     *    Invoked when a new heading is available.
     */
    @availability(iOS, introduced=3.0)
    optional func locationManager(manager: CLLocationManager!, didUpdateHeading newHeading: CLHeading!)
    
    /*
     *  locationManagerShouldDisplayHeadingCalibration:
     *
     *  Discussion:
     *    Invoked when a new heading is available. Return YES to display heading calibration info. The display 
     *    will remain until heading is calibrated, unless dismissed early via dismissHeadingCalibrationDisplay.
     */
    @availability(iOS, introduced=3.0)
    optional func locationManagerShouldDisplayHeadingCalibration(manager: CLLocationManager!) -> Bool
    
    /*
     *  locationManager:didDetermineState:forRegion:
     *
     *  Discussion:
     *    Invoked when there's a state transition for a monitored region or in response to a request for state via a
     *    a call to requestStateForRegion:.
     */
    @availability(iOS, introduced=7.0)
    optional func locationManager(manager: CLLocationManager!, didDetermineState state: CLRegionState, forRegion region: CLRegion!)
    
    /*
     *  locationManager:didRangeBeacons:inRegion:
     *
     *  Discussion:
     *    Invoked when a new set of beacons are available in the specified region.
     *    beacons is an array of CLBeacon objects.
     *    If beacons is empty, it may be assumed no beacons that match the specified region are nearby.
     *    Similarly if a specific beacon no longer appears in beacons, it may be assumed the beacon is no longer received
     *    by the device.
     */
    @availability(iOS, introduced=7.0)
    optional func locationManager(manager: CLLocationManager!, didRangeBeacons beacons: [AnyObject]!, inRegion region: CLBeaconRegion!)
    
    /*
     *  locationManager:rangingBeaconsDidFailForRegion:withError:
     *
     *  Discussion:
     *    Invoked when an error has occurred ranging beacons in a region. Error types are defined in "CLError.h".
     */
    @availability(iOS, introduced=7.0)
    optional func locationManager(manager: CLLocationManager!, rangingBeaconsDidFailForRegion region: CLBeaconRegion!, withError error: NSError!)
    
    /*
     *  locationManager:didEnterRegion:
     *
     *  Discussion:
     *    Invoked when the user enters a monitored region.  This callback will be invoked for every allocated
     *    CLLocationManager instance with a non-nil delegate that implements this method.
     */
    @availability(iOS, introduced=4.0)
    optional func locationManager(manager: CLLocationManager!, didEnterRegion region: CLRegion!)
    
    /*
     *  locationManager:didExitRegion:
     *
     *  Discussion:
     *    Invoked when the user exits a monitored region.  This callback will be invoked for every allocated
     *    CLLocationManager instance with a non-nil delegate that implements this method.
     */
    @availability(iOS, introduced=4.0)
    optional func locationManager(manager: CLLocationManager!, didExitRegion region: CLRegion!)
    
    /*
     *  locationManager:didFailWithError:
     *  
     *  Discussion:
     *    Invoked when an error has occurred. Error types are defined in "CLError.h".
     */
    optional func locationManager(manager: CLLocationManager!, didFailWithError error: NSError!)
    
    /*
     *  locationManager:monitoringDidFailForRegion:withError:
     *  
     *  Discussion:
     *    Invoked when a region monitoring error has occurred. Error types are defined in "CLError.h".
     */
    @availability(iOS, introduced=4.0)
    optional func locationManager(manager: CLLocationManager!, monitoringDidFailForRegion region: CLRegion!, withError error: NSError!)
    
    /*
     *  locationManager:didChangeAuthorizationStatus:
     *  
     *  Discussion:
     *    Invoked when the authorization status changes for this application.
     */
    @availability(iOS, introduced=4.2)
    optional func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus)
    
    /*
     *  locationManager:didStartMonitoringForRegion:
     *  
     *  Discussion:
     *    Invoked when a monitoring for a region started successfully.
     */
    @availability(iOS, introduced=5.0)
    optional func locationManager(manager: CLLocationManager!, didStartMonitoringForRegion region: CLRegion!)
    
    /*
     *  Discussion:
     *    Invoked when location updates are automatically paused.
     */
    @availability(iOS, introduced=6.0)
    optional func locationManagerDidPauseLocationUpdates(manager: CLLocationManager!)
    
    /*
     *  Discussion:
     *    Invoked when location updates are automatically resumed.
     *
     *    In the event that your application is terminated while suspended, you will
     *	  not receive this notification.
     */
    @availability(iOS, introduced=6.0)
    optional func locationManagerDidResumeLocationUpdates(manager: CLLocationManager!)
    
    /*
     *  locationManager:didFinishDeferredUpdatesWithError:
     *
     *  Discussion:
     *    Invoked when deferred updates will no longer be delivered. Stopping
     *    location, disallowing deferred updates, and meeting a specified criterion
     *    are all possible reasons for finishing deferred updates.
     *
     *    An error will be returned if deferred updates end before the specified
     *    criteria are met (see CLError).
     */
    @availability(iOS, introduced=6.0)
    optional func locationManager(manager: CLLocationManager!, didFinishDeferredUpdatesWithError error: NSError!)
    
    /*
     *  locationManager:didVisit:
     *
     *  Discussion:
     *    Invoked when the CLLocationManager determines that the device has visited
     *    a location, if visit monitoring is currently started (possibly from a
     *    prior launch).
     */
    optional func locationManager(manager: CLLocationManager!, didVisit visit: CLVisit!)