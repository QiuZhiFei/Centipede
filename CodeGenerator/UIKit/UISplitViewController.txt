UISplitViewController: UIViewController, UISplitViewControllerDelegate

DELEGATE_LIST:delegate, transitioningDelegate

    // This method allows a client to update any bar button items etc.
    @available(iOS 8.0, *)
    optional public func splitViewController(_ svc: UISplitViewController, willChangeTo displayMode: UISplitViewControllerDisplayMode)

    
    // Called by the gesture AND barButtonItem to determine what they will set the display mode to (and what the displayModeButtonItem's appearance will be.) Return UISplitViewControllerDisplayModeAutomatic to get the default behavior.
    @available(iOS 8.0, *)
    optional public func targetDisplayModeForAction(in svc: UISplitViewController) -> UISplitViewControllerDisplayMode

    
    // Override this method to customize the behavior of `showViewController:` on a split view controller. Return YES to indicate that you've handled
    // the action yourself; return NO to cause the default behavior to be executed.
    @available(iOS 8.0, *)
    optional public func splitViewController(_ splitViewController: UISplitViewController, show vc: UIViewController, sender: Any?) -> Bool

    
    // Override this method to customize the behavior of `showDetailViewController:` on a split view controller. Return YES to indicate that you've
    // handled the action yourself; return NO to cause the default behavior to be executed.
    @available(iOS 8.0, *)
    optional public func splitViewController(_ splitViewController: UISplitViewController, showDetail vc: UIViewController, sender: Any?) -> Bool

    
    // Return the view controller which is to become the primary view controller after `splitViewController` is collapsed due to a transition to
    // the horizontally-compact size class. If you return `nil`, then the argument will perform its default behavior (i.e. to use its current primary view
    // controller).
    @available(iOS 8.0, *)
    optional public func primaryViewController(forCollapsing splitViewController: UISplitViewController) -> UIViewController?

    
    // Return the view controller which is to become the primary view controller after the `splitViewController` is expanded due to a transition
    // to the horizontally-regular size class. If you return `nil`, then the argument will perform its default behavior (i.e. to use its current
    // primary view controller.)
    @available(iOS 8.0, *)
    optional public func primaryViewController(forExpanding splitViewController: UISplitViewController) -> UIViewController?

    
    // This method is called when a split view controller is collapsing its children for a transition to a compact-width size class. Override this
    // method to perform custom adjustments to the view controller hierarchy of the target controller.  When you return from this method, you're
    // expected to have modified the `primaryViewController` so as to be suitable for display in a compact-width split view controller, potentially
    // using `secondaryViewController` to do so.  Return YES to prevent UIKit from applying its default behavior; return NO to request that UIKit
    // perform its default collapsing behavior.
    @available(iOS 8.0, *)
    optional public func splitViewController(_ splitViewController: UISplitViewController, collapseSecondary secondaryViewController: UIViewController, onto primaryViewController: UIViewController) -> Bool

    
    // This method is called when a split view controller is separating its child into two children for a transition from a compact-width size
    // class to a regular-width size class. Override this method to perform custom separation behavior.  The controller returned from this method
    // will be set as the secondary view controller of the split view controller.  When you return from this method, `primaryViewController` should
    // have been configured for display in a regular-width split view controller. If you return `nil`, then `UISplitViewController` will perform
    // its default behavior.
    @available(iOS 8.0, *)
    optional public func splitViewController(_ splitViewController: UISplitViewController, separateSecondaryFrom primaryViewController: UIViewController) -> UIViewController?

    
    @available(iOS 7.0, *)
    optional public func splitViewControllerSupportedInterfaceOrientations(_ splitViewController: UISplitViewController) -> UIInterfaceOrientationMask

    @available(iOS 7.0, *)
    optional public func splitViewControllerPreferredInterfaceOrientationForPresentation(_ splitViewController: UISplitViewController) -> UIInterfaceOrientation